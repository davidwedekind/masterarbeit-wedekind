-- pt_analysis.transfer_statistics

-- Count access, egress and number of transfers at per stop
 
-- @author dwedekind

 
-- Select legs of pt trips only
WITH PT_TRIP_LEGS AS(
	SELECT L.*,
	CASE
		WHEN MODE = 'pt' THEN 1
		ELSE 0
	END AS PT_MODE
	FROM MATSIM_OUTPUT.SIM_TRIPS_ENRICHED T
	LEFT JOIN MATSIM_OUTPUT.SIM_LEGS_RAW L
	ON T.RUN_NAME = L.RUN_NAME
	AND T.TRIP_ID = L.TRIP_ID
	WHERE T.MATSIM_CAL_MAIN_MODE = 'pt'
	OR T.MATSIM_CAL_MAIN_MODE = 'pt_with_bike_used'
),


-- Left side of transfer
LEFT_SIDE AS(
	SELECT RUN_NAME,
		TRIP_ID,
		EGRESS_STOP_ID TRANSFER_STOP_ID,
		SPLIT_PART(EGRESS_STOP_ID,'.',1) TRANSFER_STOP_GROUP
	FROM(
		SELECT P.*,
			LEAD(PT_MODE, 1) OVER (PARTITION BY RUN_NAME, TRIP_ID ORDER BY DEP_TIME) PT_LEAD_1_MODE,
			LEAD(PT_MODE, 2) OVER (PARTITION BY RUN_NAME, TRIP_ID ORDER BY DEP_TIME) PT_LEAD_2_MODE,
			LEAD(PT_MODE, 3) OVER (PARTITION BY RUN_NAME, TRIP_ID ORDER BY DEP_TIME) PT_LEAD_3_MODE
		
		FROM PT_TRIP_LEGS P
	) FOO
	WHERE (PT_LEAD_1_MODE+PT_LEAD_2_MODE+PT_LEAD_3_MODE) > 0
),


-- Right side of transfer
RIGHT_SIDE AS(
	SELECT RUN_NAME,
		TRIP_ID,
		ACCESS_STOP_ID TRANSFER_STOP_ID,
		SPLIT_PART(ACCESS_STOP_ID,'.',1) TRANSFER_STOP_GROUP
	FROM(
		SELECT P.*,
			LAG(PT_MODE, 1) OVER (PARTITION BY RUN_NAME, TRIP_ID ORDER BY DEP_TIME) PT_LAG_1_MODE,
			LAG(PT_MODE, 2) OVER (PARTITION BY RUN_NAME, TRIP_ID ORDER BY DEP_TIME) PT_LAG_2_MODE,
			LAG(PT_MODE, 3) OVER (PARTITION BY RUN_NAME, TRIP_ID ORDER BY DEP_TIME) PT_LAG_3_MODE
		
		FROM PT_TRIP_LEGS P
	) FOO
	WHERE (PT_LAG_1_MODE+PT_LAG_2_MODE+PT_LAG_3_MODE) > 0
),

TRANSFERS AS(
	SELECT RUN_NAME,
	TRANSFER_STOP_GROUP
	FROM (
		SELECT * FROM LEFT_SIDE
		UNION
		SELECT * FROM RIGHT_SIDE
	) AS FOO 
	GROUP BY RUN_NAME, TRIP_ID, TRANSFER_STOP_GROUP
)

SELECT RUN_NAME,
	TRANSFER_STOP_GROUP,
	COUNT(TRANSFER_STOP_GROUP)*{**sfactor**} TRANSFERS
FROM TRANSFERS
GROUP BY RUN_NAME, TRANSFER_STOP_GROUP